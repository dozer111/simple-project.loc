<?php

echo "START".PHP_EOL;

$pid=pcntl_fork();



# Пример 1 сначала отработал родитель, потом отработал наследник

//echo "NOW WORK PID ==> ".$pid.PHP_EOL;
//for($i=0;$i<10;$i++){
//	echo "Operation".$i.PHP_EOL;
//}
//
//echo "##############################################################".PHP_EOL;


# Пример 2 Разделение 1 задачи на 2
# теперь, получается что я могу смотреть, что этот процесс из себя представляет(родителя или наследника, и
# передавать параметры)
#

//if($pid) $a=0;
//else$a=10;
//
//	echo "NOW WORK PID ==> ".$pid.PHP_EOL;
//	for($i=$a;$i<$a+10;$i++){
//		echo "Operation".$i.PHP_EOL;
//	}
//	echo "##############################################################".PHP_EOL;



# Пример 3: разделение 1 задачи на 3
# Видно, что
#       1) сначала отработал родитель 1
#       2) дочерний процесс 2 стал родителем
#       3) дочерний процесс 2 отработал как родитель
#       4) отработал дочерний (3) процесс для процесса 2



//if($pid) $a=0;
//else
//{
//	$a=10;
//	$pid=pcntl_fork();
//	if(!$pid)$a+=20;
//}
//
//echo "NOW WORK PID ==> ".$pid.PHP_EOL;
//for($i=$a;$i<$a+10;$i++){
//	echo "Operation".$i.PHP_EOL;
//}
//echo "##############################################################".PHP_EOL;







# Пример 4: родительский процесс ждёт пока завершится дочерний(
#  Если процессов будет несколько, то родитель будет ждать окончания
#  своего прямого наследника, и дальше продолжит свою работу
#)
//
//if($pid)
//{
//	$a=0;
//	# ждёт именно PID начальный, который появился на строке 5
//	pcntl_wait($pid,$status);
//}
//else
//{
//	echo "I`m forked process with PID ".getmypid();
//	$a=10;
//	echo "NOW WORK PID ==> ".$pid.PHP_EOL;
//	for($i=$a;$i<$a+10;$i++){
//		echo "Operation".$i.PHP_EOL;
//	}
//	echo "##############################################################".PHP_EOL;
//		die(0);
//
//
//
//}
//echo "NOW WORK PID ==> ".$pid.PHP_EOL;
//for($i=$a;$i<$a+10;$i++){
//	echo "Operation".$i.PHP_EOL;
//}
//echo "##############################################################".PHP_EOL;



# теперь у меня форкнуть 2 процесса
$pid2=pcntl_fork();
$process=1;
#1
if($pid )
{
	$a=0;
	# ждёт именно PID начальный, который появился на строке 5
	pcntl_wait($pid,$status);
	pcntl_wait($pid2,$status);
}
#2
else
{
	#3
	if($pid2 == getmypid() )
	{
		$a=40;
		echo "I`m forked process with PID ".getmypid();
		echo "NOW WORK PID ==> ".$pid.PHP_EOL;
		for($i=$a;$i<$a+10;$i++){
			echo "Operation".$i.PHP_EOL;
		}
		echo "##############################################################".PHP_EOL;
		die(0);
	}
	else {
		//-----------------------------------------------------------------------------------------------------------------
		echo "I`m forked process with PID " . getmypid();
		$a = 10;
		echo "NOW WORK PID ==> " . $pid . PHP_EOL;
		for ($i = $a; $i < $a + 10; $i++) {
			echo "Operation" . $i . PHP_EOL;
		}
		echo "##############################################################" . PHP_EOL;
		$process=2;
		die(0);
	}
}

#4
echo "NOW WORK PID ==> ".$pid.PHP_EOL;
for($i=$a;$i<$a+10;$i++){
	echo "Operation".$i.PHP_EOL;
}
echo "##############################################################".PHP_EOL;














































